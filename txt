[기초, 숫자 맞추기 게임 관련]

- app.json에서 전체 배경색 설정할 수 있음. backgroundColor
  --- navigation 쓸 때는 이게 적용안됨. 앞으로 계속 navigation 쓰니까
  --- Stack의 프로퍼티 contentStyle로 전체 배경색을 조절
- flex:1
  --- 기본적으로 root 컨테이너에 다 flex:1 붙이는 거같음.
  --- 이렇게 하면, 자식요소들이 최대한 공간을 크게 차지함.
- FlatList
  --- 배열 같은거 리스트 떙길 때, 사용함
  --- 무한히 많아질 때 유용함.
  --- 화면 스크롤같은거 부드럽게 해주고, 코드 짜는 것도 보조 해줌.
  --- 최적화포함
  --- numColumns 프로퍼티 : 두 줄짜리로 할 수 있음.
- ScrollView
  --- 무한히 많은 스크롤 아닐 때
  --- 공간이 명확할 때, 스크롤링 해주는 놈
  --- 각 요소를 View로 감싸고, 전체를 ScrollView로 감싸면 됨.
  --- 근데 걍 FlatList 하나만 쭉 써도 될듯?
- 그림자
  --- 안드로이드에서 그림자 주는거는 간단함. elevation 추가
  --- ios에서는 shadow~~~ 로 4개 다 추가해줘야됨. + backgroundColor : "white"까지
- Pressable 눌렀을 때 시각적 효과
  --- 안드로이드 : android_ripple
  --- ios : 스타일링 별도
  ----- style ={({pressed})=>[styles.button, pressed?styles.buttonPressed : null]}
- useFonts
  --- 폰트 쓰고 싶을 때는 useFonts 쓰면 됨
- icons
  --- 아이콘 쓸 때는 @expo/vector-icons에서 떙겨쓰면 됨.
  --- 어떤 아이콘인지는 공홈가서 보면됨.
- dimension api
  --- 기기 width, height같은거 뽑아낼 떄 사용
  --- 기기 크기 따라서 스타일 짜야할 떄
- 화면 가로 세로 회전
  --- app.json에서 orientation 부분을 만지면 됨. 기존은 잠겨있음.
  --- useWindowDimentions()
  ----- 가로 세로 회전에 따라서, 스타일이 바로바로 바뀌어야되면.
  ----- 이거 써서 width, height를 긁어오는 걸, 컴포넌트 안에다가 선언함. 그 후에 바뀌어야 하는 style을, 배열 뒤쪽에다가 덧씌우기
- 키보드 관련
  --- KeyboardAvoidingView 쓰면 됨. behavior="position" 쓰는 게 제일 좋은듯
  --- 이거 쓰면, 키보드 활성화시킬때 콘텐츠 재조정. 다른 부분 누르면 키보드 다시 꺼지게.
  --- 얘를 쓸 때, 컨텐츠가 밀려서 작아지면, scrollview로 전체를 감싸주면 됨.
  -Platform api
  --- 현재 실행되는 플랫폼을 체크할 수 있음. ios인지 맥인지 안드로이드인지 등등.
  --- 얘는 바뀔 일 없기 때문에 컴포넌트 밖으로 빼도 됨.
  --- 삼항연산자로 해도 이상 무
  --- 내부 프로퍼티로 platform.select({ios:0, android:2}) 이런 식으로 쓸 수 수 있음.
  --- 플랫폼 별로 파일을 분리해도 됨. Title.ios.js / Title.android.js 로 파일명 바꿔놓고, 사용할때는 Title에서 임포트만 하면, react-native에서 알아서 플랫폼 인식해서 맞는 걸로 써줌. 파일명만 바꾸고 나머지는 그대로 Title로 export import 하면 됨.
  - StatusBar
    --- 휴대폰 상태 표시줄 쓰는 거임.
    --- 상태 표시줄 추가해서 표시하고, 개발하는게 좋음.

[Navigation 관련]

- navigator 종류가 여러가지 있음
  --- stack, native-stack, drawer 등등 공식문서 참고
  --- 여기서는 메인으로 native-stack을 주로 활용하고, 뒤에 drawer
  --- 주로 native-stack을 활용하고, 일부 상황에서만 stack을 활용한다고 함.

- 기본은 stack.container 안에 있는 놈들을 활용
  --- 얘네는 기본 인자로, navigation, route를 받음. 원래 이걸로 전달전달해야됨.
  --- 근데 그냥, useNavigation, useRoute 쓰는게 편한듯. 이러면 어디서든 다 쓸 수 있음.
- 그림자 관련
  --- 스타일에서 innerContainer, borderRadius, overflow :"hidden" 이 없어도 되는데 있는 경우 // Pressable 안에 View로 굳이 한번 더 감싸는 경우
  --- 이런거는 다 그림자랑 borderRadius 디테일을 살리기 위해서임. ios 안드로이드 문제도 있음.
- navigation 헤더 커스텀
  --- stack.Screen의 프로퍼티로 있음.
  --- 각 페이지별로 스타일 달 때는 Stack.Screen에다가 options로 달기
  --- 공통 스타일 달 때는 Stack.Navigator에다가 screenOptions로 달기
  --- 만약 헤더 이름 같은 걸 동적으로 변경하려면?
  ----- 1. Stack 컴포넌트 단에서 options를 화살표 함수로 받아 (route, navigation)
  ----- 2. 각 컴포넌트 안에서, navigation.setOptions() 활용 (useEffect 안에 넣어야함.)
  --- 헤더에 버튼을 추가로 달고 싶을 때
  ----- 1. Stack 컴포넌트 단에서 options : {{headerRight:}}
  ----- 2. 컴포넌트 안으로 가기(다른 컴포넌트들과 상호작용해야할 때)
- 이미지 크기 문제
  --- 로컬 이미지를 가져올 때는 react-native가 알아서 크기를 잡아서 렌더링함.
  --- 웹 이미지를 쓸 때는 크기를 안잡아줌. 스타일로 이미지 크기 지정해줘야함.
- css처럼 기존 스타일 덮어쓰고 싶을 때
  --- props로 style을 받기
  --- style 선언할 때, 배열로 선언해서 덧씌우면 됨.
  --- MealItem.js에서 style, textStyle을 각각 props로 받는거 참고
- 스크롤 주는 가장 간단한 방법
  --- 그냥 다 쓰고
  --- 페이지 컴포넌트의 가장 부모를 ScrollView로 감싸면 됨.
  --- 아래 스크롤이 덜된다 하면 marginBottom 추가하면 됨.
- drawer navigation (옆에서 창 열리는 navigation)
  --- 기본 구조는 똑같음. 라이브러리만 새로 깔아주고 이름만 바뀜
  --- 디테일은 강의 다시 보기. 108강 ~
- tab navigation (하단 탭 기반 navigation)(하단 탭 말고도 많음)
  --- 얘도 뭐 큰 구조는 똑같음. 공식문서 보고 하면 될듯
  --- 디테일은 강의 110강 ~
- navigation 중첩
  --- 그냥 하면 됨.
  --- 디테일은 강의 or 코드 참고 (111강~)
  --- drawer 할 때 에러뜨는 문제 있음. 버전 문제인듯. 여기서는 그냥 1버전으로 강제해서 해결함. 추후에 에러 뜰 소지 있음.
  --- expo, expo/cli 다 최신으로 갈았음. 그 후에 라이브러리도 전부 최신화함. 해결.
--- 헤더 두개 겹칠때는, 하나에 options으로 headerShown:false 해주면 됨.